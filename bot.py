from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters.command import Command
from aiogram import types
from aiogram.enums import ParseMode
import sys
import asyncio
import logging
import aiohttp

TELEGRAM_BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(parse_mode=ParseMode.MARKDOWN)

# URL API (localhost –µ—Å–ª–∏ –±–æ—Ç –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Å api)
API_URL = "http://0.0.0.0:8000/predict"


@dp.message(Command("start"))
async def start(message: types.Message):
    # user_id = message.from_user.id
    start_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ RUTUBE\n\n"
    )

    await message.answer(start_message)


@dp.message(F.text)
async def handle_message(message: types.Message):
    question = message.text
    data = {"question": question}

    # –∑–∞–ø—Ä–æ—Å –∫ FastAPI
    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL, json=data) as response:
            if response.status != 200:
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            # –æ—Ç–≤–µ—Ç –æ—Ç API
            result = await response.json()
            answer = result.get("answer", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")
            class_1 = result.get("class_1", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            class_2 = result.get("class_2", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            # –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_text = (
                f"–û—Ç–≤–µ—Ç: {answer}\n"
                f"–ö–ª–∞—Å—Å 1: {class_1}\n"
                f"–ö–ª–∞—Å—Å 2: {class_2}"
            )
            await message.reply(response_text, parse_mode=ParseMode.HTML)


async def main():
    await dp.start_polling(bot, parse_mode=ParseMode.HTML)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
